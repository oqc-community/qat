name: Update PR with reports

on:
  workflow_run:
    workflows: ["Pull request workflow"]
    types:
      - completed

jobs:
  update-pr:
    name: Update PR with reports
    runs-on: ubuntu-latest
    steps:

      - name: Download pytest report
        uses: actions/download-artifact@v4
        with:
          name: pytest-markdown
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Download formatting report
        uses: actions/download-artifact@v4
        with:
          name: formatting-markdown
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Get PR number
        id: issue
        uses: actions/github-script@v7
        with:
          script: |
            const {data: event} = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }}
            })
            const number = event.pull_requests[0].number
            return number

      - name: Output formatting report
        id: formatting
        run: |
          SUMMARY=$(cat static-report.md)
          {
            echo 'markdown-summary<<EOF'
            echo "$SUMMARY"
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Output pytest report
        id: pytest
        run: |
          SUMMARY=$(cat output.md)
          {
            echo 'markdown-summary<<EOF'
            echo "$SUMMARY"
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Output pytest report to Pull Request
        uses: actions/github-script@v7
        env:
          SUMMARY: ${{ steps.pytest.outputs.markdown-summary }}
        with:
          script: |
            const maxGitHubBodyCharacters = 65536;
            const output = process.env.SUMMARY + `

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.issue.outputs.result }},
            })
            const botComment = comments.find(
              comment => comment.user.id === 41898282 &&
              comment.body.includes("QAT Pytest Report")
            )
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ steps.issue.outputs.result }},
                body: output
              }) 
            }
  
      - name: Output formatting report to Pull Request
        uses: actions/github-script@v7
        env:
          SUMMARY: ${{ steps.formatting.outputs.markdown-summary }}
        with:
          script: |
            const maxGitHubBodyCharacters = 65536;
            const output = process.env.SUMMARY + `

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.issue.outputs.result }},
            })
            const botComment = comments.find(
              comment => comment.user.id === 41898282 &&
              comment.body.includes("Static Analysis Report")
            )
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ steps.issue.outputs.result }},
                body: output
              }) 
            }
