name: Publish package to PyPI and TestPyPI

on:
  push:
    tags: [ '[0-9]+.[0-9]+.[0-9]+' ]
jobs:
  check-current-branch:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.check_step.outputs.branch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get current branch
        id: check_step
        # 1. Get the list of branches ref where this tag exists
        # 2. Remove 'origin/' from that result
        # 3. Put that string in output
        # => We can now use function 'contains(list, item)''
        run: |
          raw=$(git branch -r --contains ${{ github.ref }})
          branch="$(echo ${raw//origin\//} | tr -d '\n')"
          echo "{name}=branch" >> $GITHUB_OUTPUT
          echo "Branches where this tag exists : $branch."          
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: check-current-branch
    # only run if tag is present on branch 'main'
    if: contains(${{ needs.check-current-branch.outputs.branch }}, 'main') || contains(${{ needs.check-current-branch.outputs.branch }}, 'patch-release')
    steps:
    - uses: actions/checkout@v4

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Check poetry and docs version matches tag
      run: | 
        POETRY_VERSION=$(poetry version -s)
        TAG=$(echo $GITHUB_REF | cut -d / -f 3)
        DOCS_VERSION=$(grep -oP 'version = "\K.*?(?=")' docs/source/conf.py)
        [[ $POETRY_VERSION = $TAG && $DOCS_VERSION = $TAG ]] 
    - name: Poetry install
      run: poetry install --sync

    - name: Poetry build
      run: poetry build

    - name: Store the distribution packages
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

  publish-to-pypi:
    name: Publish to PyPI
    needs:
    - build
    runs-on: ubuntu-latest
    env:
      name: pypi
      url: https://pypi.org/p/qat-compiler  # Replace <package-name> with your PyPI project name
    permissions:
      id-token: write

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution ðŸ“¦ to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
    - name: Install Poetry
      uses: snok/install-poetry@v1

  github-release:
    name: >-
      Sign the Python distribution
      and upload them to GitHub Release
    needs:
    - publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v2.1.1
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        '${{ github.ref_name }}'
        --repo '${{ github.repository }}'
        --generate-notes
        --title "${{ github.ref_name }}"
        --latest
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'
    - name: Install Poetry
      uses: snok/install-poetry@v1

  publish-to-testpypi:
    name: Publish to TestPyPI
    needs:
    - build
    runs-on: ubuntu-latest

    env:
      name: testpypi
      url: https://test.pypi.org/p/qat-compiler

    permissions:
      id-token: write

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution ðŸ“¦ to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
