name: Unit tests of QAT

on:
  workflow_call:
    inputs:
      repository:
        type: string
        required: true
        default: oqc-community/qat
      formatting-tests:
        type: boolean
        required: false
        default: true
    outputs:
      legacy-result:
        description: "Legacy unit tests result"
        value: ${{ jobs.legacy-unit-tests.outputs.result }}
      stable-result:
        description: "Stable unit tests result"
        value: ${{ jobs.unit-tests.outputs.result }}
      experimental-result:
        description: "Experimental unit tests result"
        value: ${{ jobs.experimental-unit-tests.outputs.result }}
  
run-name: Units tests for QAT at ${{ github.ref }}

env:
  PYTHON_VERSION: '3.10'

jobs:

  formatting-tests:
    name: Consistency and formatting
    runs-on: ubuntu-22.04
    if: ${{ inputs.formatting-tests }}
    defaults:
      run:
        shell: bash
    outputs:
      report: ${{ steps.formatting.outputs.markdown-summary }}

    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}

      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-pip-wheels
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependancies
        if: steps.cached-pip-wheels.outputs.cache-hit != 'true'
        run: poetry install --with dev

      - name: jupytext tests
        id: jupytext
        if: ${{ !cancelled() }}
        run: |
          poetry run jupytext --sync --pipe "ruff check --fix {}" --pipe "ruff format {}" notebooks/scripts/*.py && git diff --exit-code
          poetry run nbstripout --verify --extra-keys="metadata.kernelspec" notebooks/ipynb/*.ipynb

      - name: Ruff lint check
        if: ${{ !cancelled() }}
        id: lint
        run: poetry run ruff check
      
      - name: Ruff formatter check
        id: format
        if: ${{ !cancelled() }}
        run: poetry run ruff format --check

      - name: pipaudit scan
        id: pip-audit
        if: ${{ !cancelled() }}
        run: |
          poetry run pip-audit

      - name: Pip licensing check
        id: pip-licenses
        if: ${{ !cancelled() }}
        run: poetry run pip-licenses --fail-on "GNU General Public License (GPL);GNU General Public License v2 (GPLv2);GNU General Public License v2 or later (GPLv2+);GNU General Public License v3 (GPLv3);GNU General Public License v3 or later (GPLv3+)" --from=mixed

      - name: Generate report for formatting scans
        id: formatting
        if: ${{ !cancelled() }}
        run: |
          cat <<EOF > static-report.md
          ### Static Analysis Report
          | Job | Result |
          | ---- | ------ |
          | Jupytext Check | ${{ steps.jupytext.outcome }} |
          | Lint Check | ${{ steps.lint.outcome }} |
          | Format Check | ${{ steps.format.outcome}} |
          | Pip Audit | ${{ steps.pip-audit.outcome }} |
          | Pip Licensing | ${{ steps.pip-licenses.outcome }} |
          EOF
          SUMMARY=$(cat static-report.md)
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

          {
            echo 'markdown-summary<<EOF'
            echo "$SUMMARY"
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Upload markdown report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          path: static-report.md
          name: qat-formatting-markdown

  legacy-unit-tests:
    name: Legacy Unit Tests
    runs-on: ubuntu-22.04
    outputs:
      result: ${{ steps.pytest.outputs.result }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
      - uses: ./.github/actions/testing-action
        id: pytest
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          codebase: legacy
          pytest-args: --legacy-only

  unit-tests:
    name: Stable Unit Tests
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python: ["3.10", "3.11", "3.12"]
    # Due to using a matrix, the outputs of the latest job will overwrite the outputs of all previous jobs.
    # Dynamic outputs is currently not supported in GitHub Actions, so we cannot capture the results of each Python version separately.
    # See: https://github.com/actions/runner/pull/2477
    outputs:
      result: ${{ steps.pytest.outputs.result }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
      - uses: ./.github/actions/testing-action
        id: pytest
        with:
          python-version: ${{ matrix.python }}
          codebase: stable
          pytest-args: ""
  
  experimental-unit-tests:
    name: Experimental Unit Tests
    runs-on: ubuntu-22.04
    outputs:
      result: ${{ steps.pytest.outputs.result }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
      - uses: ./.github/actions/testing-action
        id: pytest
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          codebase: experimental
          pytest-args: "--experimental-only"

  generate-report:
    name: Generate report
    runs-on: ubuntu-22.04
    if: ${{ !cancelled() }}
    needs:
      - unit-tests
      - legacy-unit-tests
      - experimental-unit-tests
      - formatting-tests
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}

      - uses: actions/download-artifact@v5
        with:
          pattern: qat_*
          path: reports/
          merge-multiple: true

      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: "3.10"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-pip-wheels
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependancies
        if: steps.cached-pip-wheels.outputs.cache-hit != 'true'
        run: poetry sync --with dev

      - name: Generate report for pytest
        run: poetry run generate-report ./reports/ ./reports/output.md ${{ github.repository }} QAT

      - name: Output to step summary
        id: pytest
        run: |
          SUMMARY=$(cat ./reports/output.md)
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

          {
            echo 'markdown-summary<<EOF'
            echo "$SUMMARY"
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Upload markdown report
        uses: actions/upload-artifact@v4
        with:
          path: reports/output.md
          name: qat-pytest-markdown
