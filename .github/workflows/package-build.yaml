name: Unit tests of QAT

on:
  workflow_call:
    inputs:
      repository:
        type: string
        required: true
        default: oqc-community/qat
  
run-name: Units tests for QAT at ${{ github.ref }}

jobs:

  formatting-tests:
    name: Consistency and formatting
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    outputs:
      report: ${{ steps.formatting.outputs.markdown-summary }}

    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}

      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: "3.10"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-pip-wheels
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependancies
        if: steps.cached-pip-wheels.outputs.cache-hit != 'true'
        run: poetry install --with dev

      - name: jupytext tests
        id: jupytext
        if: always()
        run: |
          poetry run jupytext --sync --pipe black notebooks/scripts/*.py && git diff --exit-code
          poetry run nbstripout --verify --extra-keys="metadata.kernelspec" notebooks/ipynb/*.ipynb

      - name: black scan
        id: black
        if: always()
        run: |
          poetry run black --check .

      - name: isort scan
        id: isort
        if: always()
        run: |
          poetry run isort --check .

      - name: autoflake scan
        id: autoflake
        if: always()
        run: |
          poetry run autoflake --check .

      - name: pipaudit scan
        id: pip-audit
        if: always()
        run: |
          poetry run pip-audit

      - name: Generate report for formatting scans
        id: formatting
        run: |
          cat <<EOF > static-report.md
          ### Static Analysis Report
          | Job | Result |
          | ---- | ------ |
          | Jupytext Check | ${{ steps.jupytext.outcome }} |
          | Black Scan | ${{ steps.black.outcome }} |
          | Isort Scan | ${{ steps.isort.outcome }} |
          | Autoflake Scan | ${{ steps.autoflake.outcome }} |
          | Pip Audit | ${{ steps.pip-audit.outcome }} |;
          EOF
          SUMMARY=$(cat static-report.md)
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

          {
            echo 'markdown-summary<<EOF'
            echo "$SUMMARY"
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Upload markdown report
        uses: actions/upload-artifact@v4
        with:
          path: static-report.md
          name: formatting-markdown

  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-22.04 ]
        python: ["3.10", "3.11", "3.12"]
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
      - uses: ./.github/actions/testing-action
        with:
          python-version: ${{ matrix.python }}

  generate-report:
    name: Generate report
    runs-on: ubuntu-22.04
    if: always()
    needs:
      - unit-tests
      - formatting-tests
    outputs:
      report: ${{ steps.pytest.outputs.markdown-summary }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}

      - uses: actions/download-artifact@v4
        with:
          pattern: qat_*
          path: reports/
          merge-multiple: true

      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: "3.10"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-pip-wheels
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependancies
        if: steps.cached-pip-wheels.outputs.cache-hit != 'true'
        run: poetry sync --with dev

      - name: Generate report for pytest
        run: poetry run generate-report ./reports/ ./reports/output.md ${{ github.repository }} QAT -v

      - name: Output to step summary
        id: pytest
        run: |
          SUMMARY=$(cat ./reports/output.md)
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

          {
            echo 'markdown-summary<<EOF'
            echo "$SUMMARY"
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Upload markdown report
        uses: actions/upload-artifact@v4
        with:
          path: reports/output.md
          name: pytest-markdown
