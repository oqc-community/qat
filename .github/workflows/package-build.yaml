name: Unit tests of QAT

on:
  pull_request:
    branches: [main, develop, '**patch-release**']

permissions:
  contents: write
  actions: write
  pull-requests: write

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
  
run-name: Units tests for QAT

jobs:
  create-inital-comment:
    name: Create initial comment for PR
    runs-on: ubuntu-22.04
    outputs:
      test-id: ${{ steps.test-comment.outputs.result }}
      formatting-id: ${{ steps.formatting-comment.outputs.result }}
    steps:
      - name: Create initial PR comment
        uses: actions/github-script@v7
        id: test-comment
        with:
          script: |
            const maxGitHubBodyCharacters = 65536;
            const output = `Tests starting... [follow along here](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            const resp = await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

            console.log(resp)
            console.log(resp.data.id)
            return resp.data.id

      - name: Create initial formatting PR comment
        uses: actions/github-script@v7
        id: formatting-comment
        with:
          script: |
            const maxGitHubBodyCharacters = 65536;
            const output = `Static analysis scans starting... [follow along here](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            const resp = await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

            console.log(resp)
            console.log(resp.data.id)
            return resp.data.id

  formatting-tests:
    name: Consistency and formatting
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    needs:
      - create-inital-comment

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: "3.10"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-pip-wheels
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependancies
        if: steps.cached-pip-wheels.outputs.cache-hit != 'true'
        run: poetry install --sync --with dev

      - name: jupytext tests
        id: jupytext
        if: always()
        run: |
          poetry run jupytext --sync --pipe black notebooks/scripts/*.py && git diff --exit-code
          poetry run nbstripout --verify --extra-keys="metadata.kernelspec" notebooks/ipynb/*.ipynb

      - name: black scan
        id: black
        if: always()
        run: |
          poetry run black --check .

      - name: isort scan
        id: isort
        if: always()
        run: |
          poetry run isort --check .

      - name: autoflake scan
        id: autoflake
        if: always()
        run: |
          poetry run autoflake --check .

      - name: pipaudit scan
        id: pip-audit
        if: always()
        run: |
          poetry run pip-audit

      - name: Generate report for formatting scans
        id: formatting
        run: |
          cat <<EOF > static-report.md
          ### Static Analysis Report
          | Job | Result |
          | ---- | ------ |
          | Jupytext Check | ${{ steps.jupytext.outcome }} |
          | Black Scan | ${{ steps.black.outcome }} |
          | Isort Scan | ${{ steps.isort.outcome }} |
          | Autoflake Scan | ${{ steps.autoflake.outcome }} |
          | Pip Audit | ${{ steps.pip-audit.outcome }} |;
          EOF
          SUMMARY=$(cat static-report.md)
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

          {
            echo 'markdown-summary<<EOF'
            echo "$SUMMARY"
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Generate static analysis report
        uses: actions/github-script@v7
        env:
          SUMMARY: ${{ steps.formatting.outputs.markdown-summary }}
        with:
          script: |
            const maxGitHubBodyCharacters = 65536;
            const output = process.env.SUMMARY + `

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;   
            
            await github.rest.issues.updateComment({
              issue_number: context.issue.number,
              comment_id: ${{ needs.create-inital-comment.outputs.formatting-id }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            }) 

  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-22.04 ]
        python: ["3.10", "3.11", "3.12"]
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/testing-action

  generate-report:
    name: Generate report
    runs-on: ubuntu-22.04
    if: always()
    needs:
      - unit-tests
      - create-inital-comment
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: reports/
          merge-multiple: true

      - name: Set up Python 3.x
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: "3.10"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-pip-wheels
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependancies
        if: steps.cached-pip-wheels.outputs.cache-hit != 'true'
        run: poetry install --sync --with dev

      - name: Generate report for pytest
        run: poetry run generate-report ./reports/ ./reports/output.md ${{ github.repository }} qat-compiler

      - name: Output to step summary
        id: report
        run: |
          SUMMARY=$(cat ./reports/output.md)
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

          {
            echo 'markdown-summary<<EOF'
            echo "$SUMMARY"
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Update PR
        uses: actions/github-script@v7
        env:
          SUMMARY: ${{ steps.report.outputs.markdown-summary }}
        with:
          script: |
            const maxGitHubBodyCharacters = 65536;
            const output = process.env.SUMMARY + `
          
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;   
            
            await github.rest.issues.updateComment({
              issue_number: context.issue.number,
              comment_id: ${{ needs.create-inital-comment.outputs.test-id }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
