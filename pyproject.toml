[project]
name = "qat-compiler"
# This name has the -compiler suffix in order to use the poetry and twine tools to build and publish to PyPI
# witout having to manually adjust the dist file names.
version = "2.7.0"
description = "A low-level quantum compiler and runtime which facilitates executing quantum IRs."
readme = "README.rst"
license = "BSD-3-Clause"
requires-python = ">=3.10,<3.13"
dynamic = ["dependencies"]
authors = [
    { name = "Hamid El Maazouz", email = "helmaazouz@oqc.tech" },
    { name = "Harry Waring", email = "hwaring@oqc.tech" },
    { name = "Jamie Friel", email = "jfriel@oqc.tech" },
    { name = "John Dumbell", email = "jdumbell@oqc.tech" },
    { name = "Kajsa Eriksson Rosenqvist", email = "keriksson.rosenqvist@oqc.tech" },
    { name = "Owen Arnold", email = "oarnold@oqc.tech" },
    { name = "Benjamin Sach", email = "bsach@oqc.tech" },
    { name = "Daria Van Hende", email = "dvanhende@oqc.tech" },
    { name = "Luke Causer", email = "lcauser@oqc.tech" },
]

[project.urls]
repository = "https://github.com/oqc-community/qat"
documentation = "https://oqc-community.github.io/qat/main/index.html"
homepage = "https://oqc.tech/"

[tool.poetry]
requires-poetry = ">=2.0"
packages = [
    { include = "qat", from = "src/" }
]

[tool.poetry.scripts]
format-code = "scripts.poetry_scripts:format_code"
generate-report =  "scripts.ci.generate_report:main"
jupytext-sync = "scripts.poetry_scripts:jupytext_sync"

[tool.poetry.dependencies]
numpy = ">=1.26.4"
networkx = ">=2.5"
matplotlib = "^3.7.5"
logging-config = "^1.0.4"
qutip = ">=5.1.1"
toml = "^0.10.2"
openqasm3 = { version = "^1.0.0", extras = ["parser"] }
pytket = "^1.41.0"
qiskit = "^1.4.2"
qiskit-optimization = "^0.6.1"
qiskit-aer = "^0.16.1"
qiskit-algorithms = "^0.3.1"
qiskit-experiments = "^0.7.0"
scipy = ">=1.15.2"
pyqir = ">=0.10.9"
regex = ">=3.6.1"
jsonpickle = ">=4.0.5"
qblox-instruments = "0.16.0"
lark-parser = "^0.12.0"
pydantic = "2.10.6" # TODO: change to 2.11 (see COMPILER-396 and 399)
pydantic-settings = ">=2.5.2"
compiler-config = "0.1.0"
pydantic-extra-types = "^2.10.0"
numpydantic = ">=1.6.7"
semver = "^3.0.2"
frozendict = "^2.4.6"
piny = {version = "^1.1.0"}

[tool.poetry.group.dev.dependencies]
black = {extras = ["jupyter"], version = "^24.10.0"}
pip-audit = "^2.9.0"
coverage = ">=7.8.0"
pytest = "^8.3.5"
pytest-cov = ">=6.1.1"
pytest-mock = "^3.14.0"
autoflake = "^2.3.1"
isort = "^5.13.2"
docplex = "^2.21.207"
pre-commit = "^3.2.0"
pytest-benchmark = "^4.0.0"
jinja2 = "^3.1.5"
jupytext = "1.16.7"
nbstripout = "^0.8.1"

[tool.poetry.group.licenses]
optional = true

[tool.poetry.group.licenses.dependencies]
pip-licenses = "^3.5.3"

[tool.poetry.group.release]
optional = true

[tool.poetry.group.release.dependencies]
twine = "^4.0.2"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^8.0.0"
sphinx-rtd-theme = { version = "^3.0.0" }
sphinx-autodoc-typehints = "^3.0.0"
sphinx-paramlinks = "^0.6.0"
sphinx-multiversion = "^0.2.4"
sphinx-pyproject = "^0.3.0"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.sphinx-pyproject]
copyright = "2025, Oxford Quantum Circuits Ltd"
add_module_names = false
autoclass_content = "both"
extensions = [
    "sphinx_multiversion",
    "sphinx_rtd_theme",
    "sphinx.ext.autodoc",
    "sphinx_autodoc_typehints",
    "sphinx_paramlinks",
    "sphinx.ext.graphviz",
]
templates_path = ["_templates"]
html_theme = "sphinx_rtd_theme"
html_static_path = ["_static"]
html_logo = "qat-logo.png"
html_theme_options.logo_only = false
html_theme_options.prev_next_buttons_location = "bottom"
html_theme_options.style_external_links = false
html_theme_options.vcs_pageview_mode = ""
html_theme_options.collapse_navigation = false
html_theme_options.sticky_navigation = true
html_theme_options.navigation_depth=6
html_theme_options.includehidden=true
html_theme_options.titles_only=false

[tool.autoflake]
remove-all-unused-imports = true
ignore-init-module-imports = true
ignore-pass-after-docstring = true
in-place = true
recursive = true

[tool.isort]
py_version = 39
profile = "black"
line_length = 92
known_first_party = ["qat"]
known_local_folder = ["tests", "benchmarks"]
extend_skip = ["__init__.py"]
extend_skip_glob = ["notebooks/**"]

[tool.black]
line-length = 92
target-version = ["py310", "py311", "py312"]

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib", "--doctest-modules"
]
testpaths = ['src', 'tests']
filterwarnings = [
    # Set warnings to raise errors in pytest runs.
    "error",
    # Specific warnings can be set to be handled differently if needed,
    # E.g.:
    # "default::DeprecationWarning", to show Deprecation Warnings
    # "ignore:::qutip", to ignore warnings raised from the qutip package
    # see more options: https://docs.pytest.org/en/7.1.x/how-to/capture-warnings.html
    #
    # Temporary default for pre-existing issues. Tickets exist for addressing these:
    # TODO: Watch Qiskit BasicSimulator file for update to the new run flow. COMPILER-298
    'default:.*qiskit\.compiler\.assembler\.assemble:DeprecationWarning:qat.purr.integrations.qiskit',
    # Qiskit Experiment using deprecated version of PulseBackendConfiguration
    'default:.*qiskit\.providers\.models:DeprecationWarning:qiskit_experiments.framework.backend_data',
    # Qiskit internal usage of deprecated of DAG Circuit fields
    'default:.*qiskit\.dagcircuit\.dagcircuit\.DAGCircuit\.:DeprecationWarning:qiskit:',
    # Qiskit internal usage of deprecated of Instruction field
    'default:.*qiskit\.circuit\.instruction\.Instruction\.condition:DeprecationWarning:qiskit.*:',
    # TODO: Evaluate if this warning requires action from our point. COMPILER-198
    'default:.*Conditioned gates:FutureWarning:qiskit:',
    'default:.*Conditioned gates:FutureWarning:qat.purr.integrations.qasm:',
    'default:.*Conditioned gates:FutureWarning:qat.frontend.parsers.qasm:',
    'default:.*qiskit\.circuit\.singleton\._SingletonInstructionOverrides\.c_if:DeprecationWarning:qiskit:',
    'default:.*qiskit\.circuit\.instruction\.Instruction\.c_if:DeprecationWarning::',
    # TODO: Resolve usage of deprecated Qiskit Instruction field. COMPILER-197
    'default:.*qiskit\.circuit\.instruction\.Instruction\.condition:DeprecationWarning:qat.purr.integrations.qasm:',
    'default:.*qiskit\.circuit\.instruction\.Instruction\.condition:DeprecationWarning:qat.frontend.parsers.qasm:',
    # Lark using deprecated version on sre_parse and sre_constants
    'default:.*sre_[parse|constants]:DeprecationWarning:lark.utils',
    # DOcplex using deprecated escape sequence
    'default:.*invalid escape sequence:SyntaxWarning::1092',
    'default:.*invalid escape sequence:DeprecationWarning::1092',
    # The GlobalisePhasedX pass is unreliable and deprecated. Ticket added to resolve
    'default:.*GlobalisePhasedX:DeprecationWarning',
    # TODO: Remove calls to `model_fields` attribute in instance of a `BaseModel` class (COMPILER-396)
    #'default:Accessing this attribute on the instance is deprecated, and will be removed in Pydantic V3. Instead, you should access this attribute from the model class.:pydantic.warnings.PydanticDeprecatedSince211'
]
markers = [
  "ab_test",
]

[tool.jupytext.formats]
"notebooks/ipynb/" = "ipynb"
"notebooks/scripts/" = "py:percent"

[tool.jupytext]
notebook_metadata_filter = "-kernelspec"
